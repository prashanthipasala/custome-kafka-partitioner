pipeline {
    agent any

    parameters {
        string(name: 'EC2_PUBLIC_IP', defaultValue: '3.121.45.67', description: 'Public IP of the EC2 instance')
    }

    environment {
        AWS_ACCOUNT_ID = '258724892093'
        AWS_REGION = 'eu-north-1'
        ECR_REPO_NAME = 'kafka-demo'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/prashanthipasala/custome-kafka-partitioner.git'
            }
        }

        stage('Build JAR') {
            steps {
                bat 'mvn clean install'
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker build -t %ECR_REPO_NAME%:%IMAGE_TAG% .'
            }
        }

        stage('Configure AWS CLI') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    bat '''
                    aws configure set aws_access_key_id %AWS_ACCESS_KEY_ID%
                    aws configure set aws_secret_access_key %AWS_SECRET_ACCESS_KEY%
                    aws configure set default.region %AWS_REGION%
                    '''
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                bat '''
                aws ecr get-login-password --region %AWS_REGION% | docker login --username AWS --password-stdin %AWS_ACCOUNT_ID%.dkr.ecr.%AWS_REGION%.amazonaws.com
                '''
            }
        }

        stage('Tag and Push Image to ECR') {
            steps {
                bat '''
                docker tag %ECR_REPO_NAME%:%IMAGE_TAG% %AWS_ACCOUNT_ID%.dkr.ecr.%AWS_REGION%.amazonaws.com/%ECR_REPO_NAME%:%IMAGE_TAG%
                docker push %AWS_ACCOUNT_ID%.dkr.ecr.%AWS_REGION%.amazonaws.com/%ECR_REPO_NAME%:%IMAGE_TAG%
                '''
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ec2-user@'$EC2_PUBLIC_IP' << EOF
                    aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 258724892093.dkr.ecr.eu-north-1.amazonaws.com
                    docker pull 258724892093.dkr.ecr.eu-north-1.amazonaws.com/kafka-demo:latest
                    docker rm -f kafka-demo-container || true
                    docker run -d --name kafka-demo-container -p 8080:8080 258724892093.dkr.ecr.eu-north-1.amazonaws.com/kafka-demo:latest
                    EOF
                    '''
                }
            }
        }
    }
}
